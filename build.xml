<!-- build configuration -->
<project name="jikan" default="compile" basedir=".">

  <!-- read in our deployment properties -->
  <property file="deployment.properties"/>

  <!-- identify the application -->
  <property name="app.ident" value="jikan"/>
  <property name="app.name" value="Jikan"/>
  <property name="app.version" value="1.0"/>

  <!-- various basic settings -->
  <property name="src.dir" value="src/java"/>
  <property name="deploy.dir" value="dist"/>
  <property name="dist.jar" value="${app.ident}.jar"/>

  <!-- used when generating javadocs -->
  <property name="javadoc.dir"  value="${deploy.dir}/docs"/>
  <property name="doc.packages" value="com.samskivert.jikan.*"/>
  <property name="doc.overview" value="com/samskivert/jikan/overview.html"/>
  <property name="copy.pre"     value="Copyright &#169; 2005"/>
  <property name="copyright.holder" value="Michael Bayne"/>
  <property name="copy.post"    value="All Rights Reserved."/>

  <!-- we need these libraries to build -->
  <filelist dir="." id="build.libs">
    <file name="lib/commons-codec.jar"/>
    <file name="lib/getdown.jar"/>
    <file name="lib/google-collect.jar"/>
    <file name="lib/samskivert.jar"/>
    <file name="lib/swt.jar"/>
  </filelist>

  <!-- and these libraries to build and at runtime -->
  <filelist dir="." id="runtime.libs">
    <file name="lib/gdata-calendar-2.0.jar"/>
    <file name="lib/gdata-calendar-meta-2.0.jar"/>
    <file name="lib/gdata-client-1.0.jar"/>
    <file name="lib/gdata-client-meta-1.0.jar"/>
    <file name="lib/gdata-core-1.0.jar"/>
    <file name="lib/jsr305.jar"/>
  </filelist>

  <!-- declare our classpath -->
  <path id="clazzpath">
    <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
    <pathelement location="${deploy.dir}/classes"/>
  </path>

  <!-- prepares the application directories -->
  <target name="prepare">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/classes"/>
    <mkdir dir="${javadoc.dir}"/>
    <!-- copy media and properties into the target directory -->
    <copy todir="${deploy.dir}/classes">
      <fileset dir="${src.dir}" includes="**/*.png"/>
      <fileset dir="${src.dir}" includes="**/*.properties"/>
    </copy>
    <!-- copy our build dependencies into place -->
    <mkdir dir="${deploy.dir}/lib"/>
    <copy todir="${deploy.dir}/lib" flatten="true">
      <filelist refid="build.libs"/>
      <filelist refid="runtime.libs"/>
    </copy>
    <!-- note whether we're running on Darwin -->
    <condition property="platform.darwin">
      <and><os family="mac"/><os family="unix"/></and>
    </condition>
  </target>

  <!-- cleans out the built application -->
  <target name="clean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="prepare">
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes" debug="on"
           optimize="off" deprecation="on" includeAntRuntime="no">
      <classpath refid="clazzpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <!-- build the javadoc documentation -->
  <target name="javadoc" depends="prepare">
    <javadoc sourcepath="${src.dir}"
             packagenames="${doc.packages}"
             windowtitle="${app.name} API"
             doctitle="${app.name} API"
             overview="${src.dir}/${doc.overview}"
             bottom="${copy.pre} ${copyright.holder} ${copy.post}"
             destdir="${javadoc.dir}">
      <classpath refid="clazzpath"/>
      <link href="http://www.samskivert.com/code/samskivert/docs/api"/>
      <link href="http://java.sun.com/products/jdk/1.4/docs/api"/>
    </javadoc>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,prepare,compile,javadoc,dist"/>

  <!-- builds our distribution files -->
  <target name="dist" depends="prepare,compile">
    <jar destfile="${deploy.dir}/${dist.jar}" manifest="lib/manifest.mf"
         basedir="${deploy.dir}/classes"/>
  </target>

  <!-- optimizes, combines and removes dead code -->
  <target name="proguard" depends="dist">
    <!-- figure out where the Java rt.jar file lives -->
    <condition property="runtime.jar" value="${java.home}/../Classes/classes.jar">
      <istrue value="${platform.darwin}"/>
    </condition>
    <condition property="runtime.jar" value="${java.home}/lib/rt.jar">
      <isfalse value="${platform.darwin}"/>
    </condition>

    <!-- run Proguard -->
    <taskdef resource="proguard/ant/task.properties" classpath="lib/proguard.jar"/>
    <proguard configuration="etc/jikan.pro">
      <libraryjar name="${runtime.jar}"/>
    </proguard>
  </target>

  <!-- prepares our Getdown distribution -->
  <target name="getdown" depends="proguard">
    <mkdir dir="${deploy.dir}/getdown"/>
    <mkdir dir="${deploy.dir}/getdown/code"/>
    <copy todir="${deploy.dir}/getdown">
      <fileset dir="etc" includes="getdown.txt"/>
      <fileset dir="lib" includes="getdown-pro.jar"/>
      <fileset dir="lib" includes="background.png"/>
    </copy>

    <!-- copy our jar file and runtime dependencies into place -->
    <copy todir="${deploy.dir}/getdown/code" flatten="true">
      <fileset dir="${deploy.dir}" includes="jikan-pro.jar"/>
      <filelist refid="build.libs"/>
      <filelist refid="runtime.libs"/>
      <fileset dir="lib/native" includes="swt-*.jar"/>
    </copy>

    <!-- generate the getdown digest file -->
    <taskdef name="digest" classname="com.threerings.getdown.tools.DigesterTask">
      <classpath>
        <pathelement path="${deploy.dir}/lib/commons-codec.jar"/>
        <pathelement path="${deploy.dir}/lib/getdown.jar"/>
        <pathelement path="${deploy.dir}/lib/samskivert.jar"/>
      </classpath>
    </taskdef>
    <property file="${cert_dir}/certificate.properties"/>
    <digest appdir="${deploy.dir}/getdown"/>
  </target>

  <!-- creates our Mac application -->
  <target name="macapp" depends="proguard">
    <!-- be sure the app base directory is empty -->
    <delete dir="${deploy.dir}/${app.name}.app"/>

    <!-- create the application directory with jarbundler -->
<!-- doesn't work due to SWT startOnFirstThread bullshit
    <taskdef name="jarbundler" classpathref="clazzpath"
             classname="com.loomcom.ant.tasks.jarbundler.JarBundler"/>
    <jarbundler dir="${deploy.dir}" name="${app.name}" 
                mainclass="com.samskivert.jikan.Jikan" 
                workingdirectory="$APP_PACKAGE/Contents/Resources/Java"
                jars="${deploy.dir}/jikan-pro.jar lib/native/swt-macosx.jar"
                vmoptions="-XstartOnFirstThread -Djava.library.path=."
                version="${app.version}"
                jvmversion="1.5+"
                infostring="${app.name} ${app.version}"
                icon="etc/jikan.icns"
                stubfile="etc/JavaApplicationStub"/>
-->

    <!-- create the application directory by hand, yay -->
    <mkdir dir="${deploy.dir}/${app.name}.app"/>
    <mkdir dir="${deploy.dir}/${app.name}.app/Contents"/>
    <mkdir dir="${deploy.dir}/${app.name}.app/Contents/MacOS"/>
    <mkdir dir="${deploy.dir}/${app.name}.app/Contents/Resources"/>
    <mkdir dir="${deploy.dir}/${app.name}.app/Contents/Resources/Java"/>

    <!-- copy our bits into place by hand, yay -->
    <copy todir="${deploy.dir}/${app.name}.app/Contents/" file="etc/Info.plist"/>
    <copy todir="${deploy.dir}/${app.name}.app/Contents/MacOS" file="etc/run_jikan"/>
    <copy todir="${deploy.dir}/${app.name}.app/Contents/Resources" file="etc/jikan.icns"/>
    <copy todir="${deploy.dir}/${app.name}.app/Contents/Resources/Java/">
      <fileset dir="${deploy.dir}" includes="jikan-pro.jar"/>
      <fileset dir="lib/native" includes="swt-macosx.jar"/>
    </copy>
    <exec executable="/bin/chmod">
      <arg line="a+x"/>
      <arg line="'${deploy.dir}/${app.name}.app/Contents/MacOS/run_jikan'"/>
    </exec>

    <!-- copy our native libraries into place -->
    <copy todir="${deploy.dir}/${app.name}.app/Contents/Resources/Java/">
      <fileset dir="lib/native" includes="*.jnilib"/>
    </copy>
  </target>

  <!-- creates the Mac installer image -->
  <target name="macimg" depends="macapp">
    <!-- Prepare for imaging -->
    <copy file="${ds_store}" tofile="${img.dir}/.DS_Store"/>
    <mkdir dir="${img.dir}/.background"/>
    <copy todir="${img.dir}/.background/" file="banner.png"/>

    <copy todir="${img.dir}/">
       <fileset dir="${deploy.dir}">
         <include name="${app.name}/**"/>
       </fileset>
    </copy>

    <!-- Fix permissions, no matter how silly the umask made them -->
    <exec executable="/bin/chmod">
      <arg line="-R"/>
      <arg line="u+w,go-w,a+r"/>
      <arg line="'${img.dir}'"/>
    </exec>
    <exec executable="/bin/chmod">
      <arg line="a+x"/>
      <arg line="'${img.dir}/${app.name}.app/Contents/MacOS/JavaApplicationStub'"/>
    </exec>
  </target>

  <!-- creates the linux jikan (getdown) installer -->
  <target name="linux_installer">
    <property name="linst.dir" value="${deploy.dir}/linux_installer"/>
    <mkdir dir="${linst.dir}"/>

    <copy todir="${linst.dir}">
      <fileset dir="lib/installers">
        <include name="icon.png"/>
        <include name="background.png"/>
        <include name="finish_install"/>
      </fileset>
      <fileset dir="lib" includes="getdown-pro.jar"/>
      <fileset dir="etc" includes="getdown.txt"/>
    </copy>

    <copy todir="${linst.dir}" file="lib/installers/finish_install" encoding="UTF-8">
      <filterset>
        <filter token="app_ident" value="${app.ident}"/>
        <filter token="app_name" value="${app.name}"/>
      </filterset>
    </copy>

    <exec executable="chmod" failonerror="true">
      <arg line="a+rx"/>
      <arg line="${linst.dir}/finish_install"/>
    </exec>

    <exec executable="makeself" failonerror="true" outputproperty="make.output">
      <arg line="${linst.dir}"/>
      <arg line="${deploy.dir}/${app.ident}-install.bin"/>
      <arg line="${app.ident}"/>
      <arg line="./finish_install"/>
      <arg line="$0"/>
    </exec>
    <echo level="info">${make.output}</echo>

    <delete dir="${linst.dir}"/>
  </target>

  <target name="installers" depends="linux_installer">
  </target>

  <!-- installs the getdown client and latest installers in the web document tree -->
  <target name="install" depends="getdown,installers">
    <delete dir="${web_dir}/getdown"/>
    <copy todir="${web_dir}">
      <fileset dir="${deploy.dir}" includes="getdown/**"/>
      <fileset dir="${deploy.dir}" includes="${app.ident}-install.*"/>
    </copy>
  </target>

</project>
